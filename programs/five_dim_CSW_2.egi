Z :=
  [|[| 0, 0, 0, 0 |],
    [| 0, 0, 0, 0 |],
    [| 0, 0, 0, 0 |],
    [| 0, 0, 0, 0 |]|]

I :=
  [|[| 1, 0, 0, 0 |],
    [| 0, 1, 0, 0 |],
    [| 0, 0, 1, 0 |],
    [| 0, 0, 0, 1 |]|]


J_α :=
  [|-- J_1
    [|[| 0, 0, 0, 1 |],
      [| 0, 0, 1, 0 |],
      [| 0, -1, 0, 0 |],
      [| -1, 0, 0, 0 |]|],
    -- J_2
    [|[| 0, 0, 1, 0 |],
      [| 0, 0, 0, -1 |],
      [| -1, 0, 0, 0 |],
      [| 0, 1, 0, 0 |]|],
    -- J_3
    [|[| 0, φ3, -1 * φ2, 0 |],
      [| -1 * φ3, 0, 0, φ2 |],
      [| φ2, 0, 0, φ3 |],
      [| 0, -1 * φ2, -1 * φ3, 0 |]|],
    -- J_4
    [|[| 0, φ3', -1 * φ2', 0 |],
      [| -1 * φ3', 0, 0, φ2' |],
      [| φ2', 0, 0, φ3' |],
      [| 0, -1 * φ2', -1 * φ3', 0 |]|]
      |]_α

J α := match α as integer with
  | #0 -> [|[| 0, 0, -1, 0 |],
            [| 0, 0, 0, -1 |],
            [| 1, 0, 0, 0 |],
            [| 0, 1, 0, 0 |]|]
  | #1 -> [|[| 0, 0, 0, 1 |],
            [| 0, 0, 1, 0 |],
            [| 0, -1, 0, 0 |],
            [| -1, 0, 0, 0 |]|]
  | #2 -> [|[| 0, 0, 1, 0 |],
            [| 0, 0, 0, -1 |],
            [| -1, 0, 0, 0 |],
            [| 0, 1, 0, 0 |]|]
  | #3 -> [|[| 0, φ3, -1 * φ2, 0 |],
            [| -1 * φ3, 0, 0, φ2 |],
            [| φ2, 0, 0, φ3 |],
            [| 0, -1 * φ2, -1 * φ3, 0 |]|]
  | #4 -> [|[| 0, φ3', -1 * φ2', 0 |],
            [| -1 * φ3', 0, 0, φ2' |],
            [| φ2', 0, 0, φ3' |],
            [| 0, -1 * φ2', -1 * φ3', 0 |]|]

--φ3' := (-1 * φ2 * φ2') / φ3

assertEqual "J_1^2" (withSymbols [i]  (J 1)_#_i . (J 1)~i_#) (-1 * I)
assertEqual "J_2^2" (withSymbols [i]  (J 2)_#_i . (J 2)~i_#) (-1 * I)
assertEqual "J_3^2" (withSymbols [i]  (J 3)_#_i . (J 3)~i_#) (-1 * (φ2^2 + φ3^2) * I)
assertEqual "J_4^2" (withSymbols [i]  (J 4)_#_i . (J 4)~i_#) (-1 * (φ2'^2 + φ3'^2) * I)

assertEqual "J_1 J_2 + J_2 J_1" (withSymbols [i, j, k]  (J 1)_i_j . (J 2)~j_k + (J 2)_i_j . (J 1)~j_k) Z
assertEqual "J_1 J_3 + J_3 J_1" (withSymbols [i, j, k]  (J 1)_i_j . (J 3)~j_k + (J 3)_i_j . (J 1)~j_k) Z
assertEqual "J_2 J_3 + J_3 J_2" (withSymbols [i, j, k]  (J 2)_i_j . (J 3)~j_k + (J 3)_i_j . (J 2)~j_k) (2 * φ2 * I)
assertEqual "J_2 J_4 + J_4 J_2" (withSymbols [i, j, k]  (J 2)_i_j . (J 4)~j_k + (J 4)_i_j . (J 2)~j_k) (2 * φ2' * I)
--assertEqual "J_3 J_4 + J_4 J_3" (withSymbols [i, j, k]  (J 3)_i_j . (J 4)~j_k + (J 4)_i_j . (J 3)~j_k) Z
assertEqual "J_3 J_4 + J_4 J_3" (withSymbols [i, j, k]  (J 3)_i_j . (J 4)~j_k + (J 4)_i_j . (J 3)~j_k) (-2 * (φ2 * φ2' + φ3 * φ3') * I)

combinedEvenAndOddPermutations x y :=
  let (es1, os1) := evenAndOddPermutations x in
  let (es2, os2) := evenAndOddPermutations y in
    (concat (map (\τ1 -> map (\τ2 -> \i -> match i as integer with
                                           | #0 -> 0
                                           | (#1 | #2 | #3 | #4) -> τ1 1
                                           | (#5 | #6 | #7 | #8) -> τ2 (i - 4))
                             es2) es1)
     ++
     concat (map (\τ1 -> map (\τ2 -> \i -> match i as integer with
                                           | #0 -> 0
                                           | (#1 | #2 | #3 | #4) -> τ1 1
                                           | (#5 | #6 | #7 | #8) -> τ2 (i - 4))
                             os2) os1),
     concat (map (\τ1 -> map (\τ2 -> \i -> match i as integer with
                                           | #0 -> 0
                                           | (#1 | #2 | #3 | #4) -> τ1 1
                                           | (#5 | #6 | #7 | #8) -> τ2 (i - 4))
                             os2) es1)
     ++
     concat (map (\τ1 -> map (\τ2 -> \i -> match i as integer with
                                           | #0 -> 0
                                           | (#1 | #2 | #3 | #4) -> τ1 1
                                           | (#5 | #6 | #7 | #8) -> τ2 (i - 4))
                             es2) os1))

CSW :=
  let (es, os) := combinedEvenAndOddPermutations 4 4 in
    sum (map (\σ -> withSymbols [b, a1, a2, a3, a4]
                      ((J (σ 1))_a2~b . (J (σ 1))_b_a1) . ((J (σ 3))~a3~b . (J (σ 4))_b~a2) .
                      (sum (map (\α β -> (-1 * (J α)_(σ 6)_a4 . (J α)_(σ 5)~a1 + (J α)_(σ 5)_a4 . (J α)_(σ 6)~a1 + 2 * (J α)_(σ 5)_(σ 6) . (J α)_a4~a1)
                                         *
                                         (-1 * (J β)_(σ 8)_a3 . (J β)_(σ 7)~a4 + (J β)_(σ 7)_a3 . (J β)_(σ 8)~a4 + 2 * (J β)_(σ 7)_(σ 8) . (J α)_a3~a4))
                                (matchAllDFS [0..4] as set something with
                                 | $α :: $β :: _ -> (α, β)))))
             es)
    -
    sum (map (\σ -> withSymbols [b, a1, a2, a3, a4]
                      ((J (σ 1))_a2~b . (J (σ 1))_b_a1) . ((J (σ 3))~a3~b . (J (σ 4))_b~a2) .
                      (sum (map (\α β -> (-1 * (J α)_(σ 6)_a4 . (J α)_(σ 5)~a1 + (J α)_(σ 5)_a4 . (J α)_(σ 6)~a1 + 2 * (J α)_(σ 5)_(σ 6) . (J α)_a4~a1)
                                         *
                                         (-1 * (J β)_(σ 8)_a3 . (J β)_(σ 7)~a4 + (J β)_(σ 7)_a3 . (J β)_(σ 8)~a4 + 2 * (J β)_(σ 7)_(σ 8) . (J α)_a3~a4))
                                (matchAllDFS [0..4] as set something with
                                 | $α :: $β :: _ -> (α, β)))))
             os)

CSW