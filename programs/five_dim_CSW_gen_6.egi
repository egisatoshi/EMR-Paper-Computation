Z :=
  [|[| 0, 0, 0, 0 |],
    [| 0, 0, 0, 0 |],
    [| 0, 0, 0, 0 |],
    [| 0, 0, 0, 0 |]|]

I :=
  [|[| 1, 0, 0, 0 |],
    [| 0, 1, 0, 0 |],
    [| 0, 0, 1, 0 |],
    [| 0, 0, 0, 1 |]|]


J α := match α as integer with
  | #0 -> [|[| 0, 0, -1, 0 |],
            [| 0, 0, 0, -1 |],
            [| 1, 0, 0, 0 |],
            [| 0, 1, 0, 0 |]|]
  | #1 -> [|[| 0, 0, 0, 1 |],
            [| 0, 0, 1, 0 |],
            [| 0, -1, 0, 0 |],
            [| -1, 0, 0, 0 |]|]
  | #2 -> [|[| 0, -1 * θ3, θ2, φ1 |],
            [| θ3, 0, -1 * θ1, φ2 |],
            [| -1 * θ2, θ1, 0, φ3 |],
            [| -1 * φ1, -1 * φ2, -1 * φ3, 0 |]|]
  | #3 -> [|[| 0, -1 * θ3', θ2', φ1' |],
            [| θ3', 0, -1 * θ1', φ2' |],
            [| -1 * θ2', θ1', 0, φ3' |],
            [| -1 * φ1', -1 * φ2', -1 * φ3', 0 |]|]
  | #4 -> [|[| 0, -1 * θ3'', θ2'', φ1'' |],
            [| θ3'', 0, -1 * θ1'', φ2'' |],
            [| -1 * θ2'', θ1'', 0, φ3'' |],
            [| -1 * φ1'', -1 * φ2'', -1 * φ3'', 0 |]|]

--φ3' := (-1 * φ2 * φ2') / φ3


"J_2 J_3"
withSymbols [a1, a2, b] (J 2)_a1~b . (J 3)_b_a2

"trace (J_2 J_3)"
trace (withSymbols [a1, a2, b] (J 2)_a1~b . (J 3)_b_a2)
-- -2 * θ3 * θ3' - 2 * θ2 * θ2' - 2 * φ1 * φ1' - 2 * θ1 * θ1' - 2 * φ2 * φ2' - 2 * φ3 * φ3'

ε_a1_a3 :=
  let (es, os) := evenAndOddPermutations 4 in
    sum (map (\σ -> ((J (σ 1))_a2~b . (J (σ 2))_b_a1) . ((J (σ 3))_a3~b . (J (σ 4))_b~a2)) es)
    -
    sum (map (\σ -> ((J (σ 1))_a2~b . (J (σ 2))_b_a1) . ((J (σ 3))_a3~b . (J (σ 4))_b~a2)) os)

"epsilon"
ε_#_#

ε'_a1_a3 := (1 / 2) * (ε_a1_a3 + ε_a3_a1)

"epsilon childa"
ε'_#_#
ε_#_# = ε'_#_# -- True


"trace of epsilon"
trace ε_#_# -- 0

--ε''_a1_a3 := (1 / 2) * (ε_a1_a3 - ε_a3_a1)
--ε_#_# = ε'_#_#

Ω α β :=
  let (es, os) := evenAndOddPermutations 4 in
    sum (map (\σ -> withSymbols [b, a1, a2, a3, a4]
                      (-1 * (J α)_(σ 2)_a4 . (J α)_(σ 1)~a1 + (J α)_(σ 1)_a4 . (J α)_(σ 2)~a1 + 2 * (J α)_(σ 1)_(σ 2) . (J α)_a4~a1)
                      .
                      (-1 * (J β)_(σ 4)_a3 . (J β)_(σ 3)~a4 + (J β)_(σ 3)_a3 . (J β)_(σ 4)~a4 + 2 * (J β)_(σ 3)_(σ 4) . (J α)_a3~a4))
             es)
    -
    sum (map (\σ -> withSymbols [b, a1, a2, a3, a4]
                      (-1 * (J α)_(σ 2)_a4 . (J α)_(σ 1)~a1 + (J α)_(σ 1)_a4 . (J α)_(σ 2)~a1 + 2 * (J α)_(σ 1)_(σ 2) . (J α)_a4~a1)
                      .
                      (-1 * (J β)_(σ 4)_a3 . (J β)_(σ 3)~a4 + (J β)_(σ 3)_a3 . (J β)_(σ 4)~a4 + 2 * (J β)_(σ 3)_(σ 4) . (J α)_a3~a4))
             os)

"Omega 0 0"
Ω 0 0
-- [| [| 48, 0, 0, 0 |], [| 0, 48, 0, 0 |], [| 0, 0, 48, 0 |], [| 0, 0, 0, 48 |] |]

combinedEvenAndOddPermutations x y :=
  let (es1, os1) := evenAndOddPermutations x in
  let (es2, os2) := evenAndOddPermutations y in
    (concat (map (\τ1 -> map (\τ2 -> \i -> match i as integer with
                                           | #0 -> 0
                                           | (#1 | #2 | #3 | #4) -> τ1 1
                                           | (#5 | #6 | #7 | #8) -> τ2 (i - 4))
                             es2) es1)
     ++
     concat (map (\τ1 -> map (\τ2 -> \i -> match i as integer with
                                           | #0 -> 0
                                           | (#1 | #2 | #3 | #4) -> τ1 1
                                           | (#5 | #6 | #7 | #8) -> τ2 (i - 4))
                             os2) os1),
     concat (map (\τ1 -> map (\τ2 -> \i -> match i as integer with
                                           | #0 -> 0
                                           | (#1 | #2 | #3 | #4) -> τ1 1
                                           | (#5 | #6 | #7 | #8) -> τ2 (i - 4))
                             os2) es1)
     ++
     concat (map (\τ1 -> map (\τ2 -> \i -> match i as integer with
                                           | #0 -> 0
                                           | (#1 | #2 | #3 | #4) -> τ1 1
                                           | (#5 | #6 | #7 | #8) -> τ2 (i - 4))
                             es2) os1))

Λ α β :=
  let (es, os) := combinedEvenAndOddPermutations 4 4 in
    sum (map (\σ -> withSymbols [b, a1, a2, a3, a4]
                      ((J (σ 1))_a2~b . (J (σ 2))_b_a1) . ((J (σ 3))~a3~b . (J (σ 4))_b~a2)
                      .
                      (-1 * (J α)_(σ 6)_a4 . (J α)_(σ 5)~a1 + (J α)_(σ 5)_a4 . (J α)_(σ 6)~a1 + 2 * (J α)_(σ 5)_(σ 6) . (J α)_a4~a1)
                      .
                      (-1 * (J β)_(σ 8)_a3 . (J β)_(σ 7)~a4 + (J β)_(σ 7)_a3 . (J β)_(σ 8)~a4 + 2 * (J β)_(σ 7)_(σ 8) . (J α)_a3~a4))
             es)
    -
    sum (map (\σ -> withSymbols [b, a1, a2, a3, a4]
                      ((J (σ 1))_a2~b . (J (σ 2))_b_a1) . ((J (σ 3))~a3~b . (J (σ 4))_b~a2)
                      .
                      (-1 * (J α)_(σ 6)_a4 . (J α)_(σ 5)~a1 + (J α)_(σ 5)_a4 . (J α)_(σ 6)~a1 + 2 * (J α)_(σ 5)_(σ 6) . (J α)_a4~a1)
                      .
                      (-1 * (J β)_(σ 8)_a3 . (J β)_(σ 7)~a4 + (J β)_(σ 7)_a3 . (J β)_(σ 8)~a4 + 2 * (J β)_(σ 7)_(σ 8) . (J α)_a3~a4))
             os)

"Lambda 0 0"
Λ 0 0

CSW := sum (map (\α β -> debug (Λ (debug α) (debug β)))
                (matchAllDFS [0..4] as set something with
                   | $α :: $β :: _ -> (α, β)))

CSW