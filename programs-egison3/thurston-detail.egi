(define $x~ [| θ₁ θ₂ θ₃ θ₄ |])

(define $g__ 
  [|[| 1 0 0 0 |]
    [| 0 1 0 0 |]
    [| 0 0 (/ κ (sqrt β)) (/ (* -1 θ₂ κ) (sqrt β))  |]
    [| 0 0 (/ (* -1 θ₂ κ) (sqrt β)) (/ (* '(+ 1 θ₂) κ) (sqrt β)) |]|])

;(define $g~~ (M.inverse g_#_#))
(define $g~~
  [|[| 1 0 0 0 |]
    [| 0 1 0 0 |]
    [| 0 0 (/ '(+ 1 θ₂) (* κ (sqrt β))) (/ θ₂ (* (sqrt β) κ)) |]
    [| 0 0 (/ θ₂ (* (sqrt β) κ)) (/ 1 (* (sqrt β) κ)) |]|])

(define $β '(+ 1 θ₂ (* -1 (** θ₂ 2))))
;(define $β (function [θ₂]))

(define $Γ~c_a_b
  (. (/ 1 2)
     g~c~e
     (+ (∂/∂ g_b_e x~a)
        (∂/∂ g_a_e x~b)
        (* -1 (∂/∂ g_a_b x~e)))))

(define $R_i_j_k~l
  (with-symbols {a}
    (+ (- (∂/∂ Γ~l_j_k x~i) (∂/∂ Γ~l_i_k x~j))
       (- (. Γ~l_i_a Γ~a_j_k) (. Γ~l_j_a Γ~a_i_k)))))

(define $R_i_j_k_l
  (with-symbols {a}
    (. R_i_j_k~a g_a_l)))

(define $J__
  [|[| 0 1 0 0 |]
    [| -1 0 0 0 |]
    [| 0 0 0 κ |]
    [| 0 0 (* -1 κ) 0 |]|])

(define $J_a~c (. J_a_b g~b~c))

(define $∇J_m_a_b
  (with-symbols {n}
    (- (∂/∂ J_a_b x~m)
       (. Γ~n_m_a J_n_b)
       (. Γ~n_m_b J_a_n))))

(define $∇J~m_a_b
  (with-symbols {t}
    (. ∇J_t_a_b g~t~m)))

(define $∇J_m~a_b
  (with-symbols {t}
    (. ∇J_m_t_b g~t~a)))

(define $∇J_m_a~b
  (with-symbols {t}
    (. ∇J_m_a_t g~t~b)))

(define $δ
  (generate-tensor
    (match-lambda [integer integer]
      {[[$n ,n] 1]
       [[_ _] 0]})
    {5 5}))

(define $R'___~
  (generate-tensor
    (match-lambda [integer integer integer integer]
      {
       [[,1 ,1 _ _] 0]
       [[_ _ ,1 ,1] 0]
       [[,1 $b ,1 $d] (* -1 p^2 δ~(- b 1)_(- d 1))]
       [[$a ,1 ,1 $d] (*    p^2 δ~(- a 1)_(- d 1))]
       [[,1 $b $c ,1] (*    p^2 g_(- b 1)_(- c 1))]
       [[$a ,1 $c ,1] (* -1 p^2 g_(- a 1)_(- c 1))]
       [[,1 $b $c $d] (* -1 p ∇J_(- b 1)_(- c 1)~(- d 1))]
       [[$a ,1 $c $d] (*    p ∇J_(- a 1)_(- c 1)~(- d 1))]
       [[$a $b ,1 $d] (* -1 p ∇J~(- d 1)_(- a 1)_(- b 1))]
       [[$a $b $c ,1] (* p ∇J_(- c 1)_(- a 1)_(- b 1))]
       [[$a $b $c $d] (+ R_(- a 1)_(- b 1)_(- c 1)~(- d 1)
                         (* -1 p^2 J_(- b 1)_(- c 1) J_(- a 1)~(- d 1))
                         (*    p^2 J_(- a 1)_(- c 1) J_(- b 1)~(- d 1))
                         (* 2  p^2 J_(- a 1)_(- b 1) J_(- c 1)~(- d 1)))]
       })
    {5 5 5 5}))

(define $S
  (with-symbols {i j k}
    (let {[[$es $os] (even-and-odd-permutations 5)]}
      (- (sum (map (lambda [$σ] (. R'_(σ 1)_j_1~i R'_(σ 2)_(σ 3)_k~j R'_(σ 4)_(σ 5)_i~k)) es))
         (sum (map (lambda [$σ] (. R'_(σ 1)_j_1~i R'_(σ 2)_(σ 3)_k~j R'_(σ 4)_(σ 5)_i~k)) os))))))

"S start"
;S
"S end"

(define $S'
  (with-symbols {i j k l}
    (let {[[$es $os] (even-and-odd-permutations 7)]}
      (- (sum (map (lambda [$σ] (. R'_(σ 1)_j_1~i R'_(σ 2)_(σ 3)_k~j R'_(σ 4)_(σ 5)_l~k  R'_(σ 6)_(σ 7)_i~l)) es))
         (sum (map (lambda [$σ] (. R'_(σ 1)_j_1~i R'_(σ 2)_(σ 3)_k~j R'_(σ 4)_(σ 5)_l~k  R'_(σ 6)_(σ 7)_i~l)) os))))))

"S' start"
S'
"S' end"

;; Check

(define $A1
  (with-symbols {i j k}
    (let* {[[$es $os] (even-and-odd-permutations 5)]
           [$es' (filter (lambda [$σ] (eq? (σ 1) 1)) es)]
           [$os' (filter (lambda [$σ] (eq? (σ 1) 1)) os)]}
      (- (sum (map (lambda [$σ] (. R'_(σ 1)_j_1~i R'_(σ 2)_(σ 3)_k~j R'_(σ 4)_(σ 5)_i~k)) es'))
         (sum (map (lambda [$σ] (. R'_(σ 1)_j_1~i R'_(σ 2)_(σ 3)_k~j R'_(σ 4)_(σ 5)_i~k)) os'))))))

"A1"
;A1
"A1"

(define $A1-4-1
  (with-symbols {a b}
    (let {[[$es $os] (even-and-odd-permutations 4)]}
      (- (sum (map (lambda [$σ] (. 2 p^4 R_(σ 1)_(σ 2)_a_b J_(σ 4)~b J_(σ 3)~a)) es))
         (sum (map (lambda [$σ] (. 2 p^4 R_(σ 1)_(σ 2)_a_b J_(σ 4)~b J_(σ 3)~a)) os))))))

"A1-4-1"
;A1-4-1
"A1-4-1"

(define $A1-4-2
  (with-symbols {a b}
    (let {[[$es $os] (even-and-odd-permutations 4)]}
      (- (sum (map (lambda [$σ] (. -4 p^4 R_(σ 1)_(σ 2)_a~b J_b~a J_(σ 3)_(σ 4))) es))
         (sum (map (lambda [$σ] (. -4 p^4 R_(σ 1)_(σ 2)_a~b J_b~a J_(σ 3)_(σ 4))) os))))))

"A1-4-2"
;A1-4-2
"A1-4-2"

(define $A2
  (with-symbols {i j k}
    (let* {[[$es $os] (even-and-odd-permutations 5)]
           [$es' (filter (lambda [$σ] (eq? (σ 2) 1)) es)]
           [$os' (filter (lambda [$σ] (eq? (σ 2) 1)) os)]}
      (- (sum (map (lambda [$σ] (. R'_(σ 1)_j_1~i R'_(σ 2)_(σ 3)_k~j R'_(σ 4)_(σ 5)_i~k)) es'))
         (sum (map (lambda [$σ] (. R'_(σ 1)_j_1~i R'_(σ 2)_(σ 3)_k~j R'_(σ 4)_(σ 5)_i~k)) os'))))))
"A2"
;A2
"A2"

(define $A2-4-1
  (with-symbols {b b'}
    (let {[[$es $os] (even-and-odd-permutations 4)]}
      (- (sum (map (lambda [$σ] (. -1 p^4 g~b~b' ∇J_b_(σ 1)_(σ 2) ∇J_b'_(σ 3)_(σ 4))) es))
         (sum (map (lambda [$σ] (. -1 p^4 g~b~b' ∇J_b_(σ 1)_(σ 2) ∇J_b'_(σ 3)_(σ 4))) os))))))

"A2-4-1"
;A2-4-1
"A2-4-1"

(define $A2-4-2
  (with-symbols {a1 a2 a1' a2' b b'}
    (let {[[$es $os] (even-and-odd-permutations 4)]}
      (- (sum (map (lambda [$σ] (. 2 p^4 ∇J_b'_(σ 1)_a1 ∇J_(σ 2)_a2_a1' J_(σ 4)_b J_(σ 3)_a2' g~b~b' g~a2~a2' g~a1~a1')) es))
         (sum (map (lambda [$σ] (. 2 p^4 ∇J_b'_(σ 1)_a1 ∇J_(σ 2)_a2_a1' J_(σ 4)_b J_(σ 3)_a2' g~b~b' g~a2~a2' g~a1~a1')) os))))))

"A2-4-2"
;A2-4-2
"A2-4-2"

(define $A2-4-3
  (with-symbols {a1 a2 a1' a2' b b'}
    (let {[[$es $os] (even-and-odd-permutations 4)]}
      (- (sum (map (lambda [$σ] (. -2 p^4 ∇J_b'_(σ 1)_a1 ∇J_(σ 2)_a2_a1' J_(σ 3)_(σ 4) J_b_a2' g~b~b' g~a2~a2' g~a1~a1')) es))
         (sum (map (lambda [$σ] (. -2 p^4 ∇J_b'_(σ 1)_a1 ∇J_(σ 2)_a2_a1' J_(σ 3)_(σ 4) J_b_a2' g~b~b' g~a2~a2' g~a1~a1')) os))))))

"A2-4-3"
;A2-4-3
"A2-4-3"

"Check A2 = ..."
;(- A2 A2-4-1 A2-4-2 A2-4-3)
"Check A2 = ..."

(define $A3
  (with-symbols {i j k}
    (let* {[[$es $os] (even-and-odd-permutations 5)]
           [$es' (filter (lambda [$σ] (eq? (σ 4) 1)) es)]
           [$os' (filter (lambda [$σ] (eq? (σ 4) 1)) os)]}
      (- (sum (map (lambda [$σ] (. R'_(σ 1)_j_1~i R'_(σ 2)_(σ 3)_k~j R'_(σ 4)_(σ 5)_i~k)) es'))
         (sum (map (lambda [$σ] (. R'_(σ 1)_j_1~i R'_(σ 2)_(σ 3)_k~j R'_(σ 4)_(σ 5)_i~k)) os'))))))
"A3"
;A3
"A3"

(define $A3-4-1
  (with-symbols {b b'}
    (let {[[$es $os] (even-and-odd-permutations 4)]}
      (- (sum (map (lambda [$σ] (. 2 p^4 ∇J_b_(σ 3)_a1 ∇J_(σ 4)_b'~a2 J_(σ 2)_a2 J_(σ 1)~a1 g~b~b')) es))
         (sum (map (lambda [$σ] (. 2 p^4 ∇J_b_(σ 3)_a1 ∇J_(σ 4)_b'~a2 J_(σ 2)_a2 J_(σ 1)~a1 g~b~b')) os))))))

"A3-4-1"
;A3-4-1
"A3-4-1"

(define $A3-4-2
  (with-symbols {b b'}
    (let {[[$es $os] (even-and-odd-permutations 4)]}
      (- (sum (map (lambda [$σ] (. -2 p^4 ∇J_b_(σ 3)_a1 ∇J_(σ 4)_b'~a2 J_a2~a1 J_(σ 1)_(σ 2) g~b~b')) es))
         (sum (map (lambda [$σ] (. -2 p^4 ∇J_b_(σ 3)_a1 ∇J_(σ 4)_b'~a2 J_a2~a1 J_(σ 1)_(σ 2) g~b~b')) os))))))

"A3-4-2"
;A3-4-2
"A3-4-2"


(define $A-4.27-1
  (with-symbols {b b'}
    (let {[[$es $os] (even-and-odd-permutations 4)]}
      (- (sum (map (lambda [$σ] (. -1 p^2 R_(σ 1)_(σ 2)_a2~b R_(σ 3)_(σ 4)_b~a2)) es))
         (sum (map (lambda [$σ] (. -1 p^2 R_(σ 1)_(σ 2)_a2~b R_(σ 3)_(σ 4)_b~a2)) os))))))

"A-4.27-1"
;A-4.27-1
"A-4.27-1"


(define $A-4.27
  (with-symbols {b b'}
    (let {[[$es $os] (even-and-odd-permutations 4)]}
      (- (sum (map (lambda [$σ] (- (.  2 p^4 R_(σ 1)_(σ 2)_a2_b J_(σ 4)~b J_(σ 3)~a2)
                                   (. -4 p^4 R_(σ 1)_(σ 2)_a2~b J_b~a2 J_(σ 3)_(σ 4)))) es))
         (sum (map (lambda [$σ] (- (.  2 p^4 R_(σ 1)_(σ 2)_a2_b J_(σ 4)~b J_(σ 3)~a2)
                                   (. -4 p^4 R_(σ 1)_(σ 2)_a2~b J_b~a2 J_(σ 3)_(σ 4)))) os))))))

"A-4.27"
;A-4.27
"A-4.27"


"R_3_4_#~#"
;R_3_4_#~#
"R_3_4_#~#"

"R_3_4_#_#"
;R_3_4_#_#
"R_3_4_#_#"


(define $A-2-4-3
  (with-symbols {a1 a2 a1' a2' b b'}
    (let {[[$es $os] (even-and-odd-permutations 4)]}
      (- (sum (map (lambda [$σ]
                     (* -2 p^4 (. ∇J_b'_(σ 1)_a1 ∇J_(σ 2)_a2_a1' J_(σ 3)_(σ 4) J_b_a2' g~b~b' g~a2~a2' g~a1~a1'))
                     ) es))
         (sum (map (lambda [$σ]
                     (* -2 p^4 (. ∇J_b'_(σ 1)_a1 ∇J_(σ 2)_a2_a1' J_(σ 3)_(σ 4) J_b_a2' g~b~b' g~a2~a2' g~a1~a1'))
                     ) os))))))

(define $A-3-4-2
  (with-symbols {a1 a2 b b'}
    (let {[[$es $os] (even-and-odd-permutations 4)]}
      (- (sum (map (lambda [$σ]
                     (* -2 p^4 (. ∇J_b_(σ 3)_a1 ∇J_(σ 4)_b'~a2 J_a2~a1 J_(σ 1)_(σ 2) g~b~b'))
                     ) es))
         (sum (map (lambda [$σ]
                     (* -2 p^4 (. ∇J_b_(σ 3)_a1 ∇J_(σ 4)_b'~a2 J_a2~a1 J_(σ 1)_(σ 2) g~b~b'))
                     ) os))))))


"A-2-4-3"
;A-2-4-3
"A-2-4-3"

"A-3-4-2"
;A-3-4-2
"A-3-4-2"
