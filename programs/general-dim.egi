N := 5

J :=
  generateTensor
    (\match as (integer, integer) with
       | ($i, #(i + N)) -> 1
       | ($i, #(i - N)) -> -1
       | _ -> 0)
    [2 * N, 2 * N]

"J"
J

δ :=
  generateTensor
    (\match as (integer, integer) with
       | ($i, #i) -> 1
       | _ -> 0)
    [2 * N, 2 * N]

"δ"
δ

g := δ

T_a_b_c~d :=
  -1 * J_b_c . J_a~d +
  J_a_c . J_b~d +
  2 * J_a_b . J_c~d

"T"
T_#_#_#~#


S' :=
  withSymbols [i, j, k]
    let (es, os) := evenAndOddPermutations (2 * N) in
--      sum (map (\σ -> foldl (.) 1 (map (\k -> T_(σ (2 * k - 1))_(σ (2 * k))_(a_(modulo k N))~(a_(k - 1))) (between 1 N))) es) -
--      sum (map (\σ -> foldl (.) 1 (map (\k -> T_(σ (2 * k - 1))_(σ (2 * k))_(a_(modulo k N))~(a_(k - 1))) (between 1 N))) os)
      sum (map (\σ -> debug (foldl (.) 1 (map (\k -> T_(σ (2 * k - 1))_(σ (2 * k))_(a_(modulo k N))~(a_(k - 1))) (between 1 N)))) es) -
      sum (map (\σ -> debug (foldl (.) 1 (map (\k -> T_(σ (2 * k - 1))_(σ (2 * k))_(a_(modulo k N))~(a_(k - 1))) (between 1 N)))) os)

S'
